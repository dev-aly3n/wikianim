{"version":3,"sources":["utils/queries.js","pages/Loading.js","pages/ScrollToTop.js","pages/Footer.js","pages/ProgressBar.js","App.js","index.js"],"names":["menuSearchQuery","gql","filterQuery","detailQuery","recomListQuery","homeQuery","charQuery","Loading","className","ScrollToTop","pathname","useLocation","useState","pervPath","setPervPath","useEffect","includes","document","getElementById","scrollTo","Footer","alt","src","href","target","rel","ProgressBar","progressRef","useRef","client","useApolloClient","READ_ISLOADING","isChanged","bar","current","firstElementChild","shining","children","watchQuery","query","fetchPolicy","subscribe","next","data","loadingbar","isLoading","classList","add","remove","setTimeout","error","e","console","ref","Home","React","lazy","AnimeDetail","AnimeFilter","Error404","App","writeQuery","__typename","fallback","path","exact","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider"],"mappings":"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","file":"static/js/main.b44a27a4.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const menuSearchQuery = gql`\r\n  query MeNuSeArCh($search: String) {\r\n    Page(perPage: 5, page: 1) {\r\n      media(search: $search, sort: SEARCH_MATCH) {\r\n        id\r\n        coverImage {\r\n          medium\r\n        }\r\n        title {\r\n          english\r\n          romaji\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const filterQuery = gql`\r\n  query FiLtErPaGe($search: String) {\r\n    filter: Page(perPage: 50, page: 1) {\r\n      media(search: $search) {\r\n        id\r\n        title {\r\n          english\r\n          romaji\r\n        }\r\n        coverImage {\r\n          large\r\n        }\r\n        source\r\n        format\r\n        status\r\n        averageScore\r\n        popularity\r\n        seasonYear\r\n        season\r\n        tags {\r\n          name\r\n        }\r\n        description(asHtml: true)\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const detailQuery = gql`\r\n  query SelectedAnImE($id: Int) {\r\n    Media(id: $id) {\r\n      id\r\n      title {\r\n        english\r\n        romaji\r\n      }\r\n      description(asHtml: true)\r\n      duration\r\n      startDate {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      endDate {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      coverImage {\r\n        large\r\n        color\r\n      }\r\n      bannerImage\r\n      episodes\r\n      season\r\n      seasonYear\r\n      rankings {\r\n        id\r\n        context\r\n        allTime\r\n        rank\r\n        year\r\n        season\r\n      }\r\n      format\r\n      genres\r\n      streamingEpisodes {\r\n        title\r\n        thumbnail\r\n        url\r\n      }\r\n      relations {\r\n        edges {\r\n          node {\r\n            title {\r\n              english\r\n              romaji\r\n            }\r\n            id\r\n            coverImage {\r\n              large\r\n              color\r\n            }\r\n            source\r\n            format\r\n            status\r\n          }\r\n        }\r\n      }\r\n      reviews {\r\n        edges {\r\n          node {\r\n            id\r\n            user {\r\n              id\r\n              name\r\n              avatar {\r\n                medium\r\n              }\r\n            }\r\n            score\r\n            rating\r\n            ratingAmount\r\n            summary\r\n            body(asHtml: true)\r\n            createdAt\r\n          }\r\n        }\r\n      }\r\n      externalLinks {\r\n        id\r\n        site\r\n        url\r\n      }\r\n      studios {\r\n        edges {\r\n          isMain\r\n          node {\r\n            name\r\n            siteUrl\r\n            id\r\n          }\r\n        }\r\n      }\r\n      tags {\r\n        name\r\n        rank\r\n      }\r\n      popularity\r\n      meanScore\r\n      source\r\n      chapters\r\n      volumes\r\n      favourites\r\n      nextAiringEpisode {\r\n        timeUntilAiring\r\n        episode\r\n      }\r\n      trailer {\r\n        id\r\n      }\r\n      characters(sort: [ROLE]) {\r\n        edges {\r\n          role\r\n          voiceActors {\r\n            id\r\n            name {\r\n              full\r\n            }\r\n            image {\r\n              medium\r\n            }\r\n            languageV2\r\n          }\r\n          node {\r\n            id\r\n            name {\r\n              full\r\n            }\r\n            image {\r\n              medium\r\n            }\r\n          }\r\n        }\r\n      }\r\n      staff(sort: FAVOURITES_DESC) {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const recomListQuery = gql`\r\n  query rEcOmLiStQuErY($id: Int) {\r\n    Media(id: $id) {\r\n      recommendations(sort: RATING_DESC) {\r\n        edges {\r\n          node {\r\n            rating\r\n            mediaRecommendation {\r\n              id\r\n              format\r\n              source\r\n              status\r\n              title {\r\n                english\r\n                romaji\r\n              }\r\n              coverImage {\r\n                large\r\n              }\r\n              description\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const homeQuery = gql`\r\n  query HoMeAnImE {\r\n    top100: Page(perPage: 50, page: 1) {\r\n      media(sort: SCORE_DESC) {\r\n        id\r\n        title {\r\n          english\r\n          romaji\r\n        }\r\n        coverImage {\r\n          large\r\n        }\r\n        source\r\n        format\r\n        status\r\n        averageScore\r\n        popularity\r\n        seasonYear\r\n        season\r\n        tags {\r\n          name\r\n        }\r\n        description(asHtml: true)\r\n      }\r\n    }\r\n    airing: Page(perPage: 50, page: 1) {\r\n      airingSchedules(sort: TIME, notYetAired: true) {\r\n        media {\r\n          id\r\n          nextAiringEpisode {\r\n            episode\r\n            timeUntilAiring\r\n          }\r\n          bannerImage\r\n          title {\r\n            english\r\n            romaji\r\n          }\r\n          source\r\n          format\r\n          genres\r\n          coverImage {\r\n            large\r\n          }\r\n          description(asHtml: true)\r\n        }\r\n      }\r\n    }\r\n    trending: Page(page: 1, perPage: 50) {\r\n      media(sort: TRENDING_DESC) {\r\n        id\r\n        coverImage {\r\n          large\r\n        }\r\n        title {\r\n          english\r\n          romaji\r\n        }\r\n        source\r\n        format\r\n        status\r\n        averageScore\r\n        meanScore\r\n      }\r\n    }\r\n    homeRecom: Page(perPage: 30, page: 1) {\r\n      recommendations(sort: RATING_DESC) {\r\n        rating\r\n        media {\r\n          id\r\n          description(asHtml: true)\r\n          title {\r\n            english\r\n            romaji\r\n          }\r\n          format\r\n          status\r\n          source\r\n          coverImage {\r\n            large\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allTime: Page(perPage: 50, page: 1) {\r\n      media(sort: POPULARITY_DESC) {\r\n        id\r\n        title {\r\n          english\r\n          romaji\r\n        }\r\n        coverImage {\r\n          large\r\n        }\r\n        source\r\n        format\r\n        status\r\n        averageScore\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const charQuery = gql`\r\n  query SelectedChar($char_id: Int, $staff_id: Int) {\r\n    Character(id: $char_id) {\r\n      id\r\n      name {\r\n        full\r\n        native\r\n      }\r\n      age\r\n      gender\r\n      dateOfBirth {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      description(asHtml: true)\r\n      image {\r\n        large\r\n      }\r\n      favourites\r\n      media {\r\n        edges {\r\n          node {\r\n            id\r\n            coverImage {\r\n              large\r\n            }\r\n            format\r\n            source\r\n            status\r\n            title {\r\n              english\r\n              romaji\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Staff(id: $staff_id) {\r\n      id\r\n      name {\r\n        full\r\n        native\r\n      }\r\n      favourites\r\n      age\r\n      gender\r\n      dateOfBirth {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      dateOfDeath {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      homeTown\r\n      languageV2\r\n      image {\r\n        large\r\n      }\r\n      yearsActive\r\n      description(asHtml: true)\r\n      staffMedia {\r\n        edges {\r\n          node {\r\n            id\r\n            coverImage {\r\n              large\r\n            }\r\n            format\r\n            source\r\n            status\r\n            title {\r\n              english\r\n              romaji\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const Loading = () => {\r\n  return (\r\n    <div className=\"main-loading-container\">\r\n      <div>\r\n        <div className=\"lds-ripple\">\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Loading;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const location = useLocation();\r\n  const pathname = location.pathname;\r\n  const [pervPath, setPervPath] = useState(pathname);\r\n\r\n  useEffect(() => {\r\n    if (pathname.includes(\"character\") || pervPath.includes(\"character\")) {\r\n    } else {\r\n      document.getElementById(\"root\").scrollTo(0, 0);\r\n      // document.getElementById(\"navigation\").style.top = \"0\";\r\n    }\r\n    setPervPath(pathname);\r\n    // eslint-disable-next-line\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","const Footer = () => {\r\n  return (\r\n    <div className=\"footer-container\">\r\n      <div>\r\n        <div className=\"footer-thank\">\r\n          <p>\r\n            This Single Page Application built by the power of React, graphQL\r\n            and Tailwind css and ect... <br />\r\n            this takes 50 days from me to built, however I learnt a lot at this\r\n            time beside working on my application <br />\r\n            anyway thank you to visiting my app and a big thanks to anilist\r\n            graphQL server <br />\r\n            <span>\r\n              if you think there is something wrong, then please open the\r\n              application with chrome browser.\r\n            </span>\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"footer-logo group\">\r\n          <h1 className=\"animate-textShadowPopTl group-hover:animate-textShadowPopTr\">\r\n            WA\r\n          </h1>\r\n          <span className=\"animate-textShadowPopTl group-hover:animate-textShadowPopTr \">\r\n            Wiki Anime\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"footer-links\">\r\n          <h4> Links</h4>\r\n          <ul>\r\n            <li>\r\n              <img\r\n                alt=\"\"\r\n                src={\r\n                  \"https://img.pngio.com/github-logo-icon-of-glyph-style-available-in-svg-png-eps-ai-github-icon-png-256_256.png\"\r\n                }\r\n              />\r\n              <a\r\n                href=\"https://github.com/dev-aly3n\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                {\" \"}\r\n                dev-aly3n GitHub\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <img\r\n                alt=\"\"\r\n                src={\r\n                  \"https://www.strategy-works.com/wp-content/uploads/2017/12/Icon-LinkedIn.png\"\r\n                }\r\n              />\r\n              <a\r\n                href=\"https://www.linkedin.com/in/aly-mohamadi-4bb966212/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                {\" \"}\r\n                dev-aly3n LinkedIn\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <img alt=\"\" src={\"https://telegram.org/img/td_icon.png\"} />\r\n              <a\r\n                href=\"https://telegram.me/aly3n\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                {\" \"}\r\n                dev-aly3n Telegram\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n\r\n      <div> All right reserved © dev-aly3n 2021</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { useApolloClient } from \"@apollo/client\";\r\nimport { gql } from \"@apollo/client\";\r\n\r\nconst ProgressBar = () => {\r\n  const progressRef = useRef(null);\r\n  const client = useApolloClient();\r\n\r\n  const READ_ISLOADING = gql`\r\n    query ReadLoading {\r\n      loadingbar {\r\n        isLoading\r\n      }\r\n    }\r\n  `;\r\n  let loadingParam;\r\n  let isChanged = false;\r\n\r\n  useEffect(() => {\r\n    const bar = progressRef.current.firstElementChild;\r\n    const shining = progressRef.current.children[1];\r\n     client.watchQuery({\r\n        query: READ_ISLOADING,\r\n        fetchPolicy: \"cache-only\",\r\n      })\r\n      .subscribe({\r\n        next: ({ data }) => {\r\n          // eslint-disable-next-line\r\n          loadingParam = data.loadingbar.isLoading;\r\n          if (loadingParam < 50) {\r\n            bar.classList.add(\"first-load-animate\");\r\n            progressRef.current.classList.add(\"last-load-animate-for-parent\");\r\n            shining.classList.add(\"shining-bar-animate\");\r\n          } else {\r\n            progressRef.current.classList.remove(\r\n              \"last-load-animate-for-parent\"\r\n            );\r\n            bar.classList.remove(\"first-load-animate\");\r\n            bar.classList.add(\"last-load-animate\");\r\n            progressRef.current.classList.add(\"last-load-animate-for-parent\");\r\n\r\n            setTimeout(() => {\r\n              bar.classList.remove(\"last-load-animate\");\r\n              progressRef.current.classList.remove(\r\n                \"last-load-animate-for-parent\"\r\n              );\r\n              shining.classList.remove(\"shining-bar-animate\");\r\n            }, 1000);\r\n          }\r\n          // eslint-disable-next-line\r\n          isChanged = !isChanged;\r\n        },\r\n        error: (e) => console.error(e),\r\n      });\r\n  }, [isChanged]);\r\n  return (\r\n    <div ref={progressRef} className=\"progress-bar-container\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { Suspense } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useApolloClient } from \"@apollo/client\";\r\nimport { gql } from \"@apollo/client\";\r\n\r\nimport Header from \"./pages/Header\";\r\nimport ScrollToTop from \"./pages/ScrollToTop\";\r\nimport Footer from \"./pages/Footer\";\r\nimport ProgressBar from \"./pages/ProgressBar\";\r\nimport Loading from \"./pages/Loading\";\r\nconst Home = React.lazy(() => import(\"./pages/Home\"));\r\nconst AnimeDetail = React.lazy(() => import(\"./pages/AnimeDetail\"));\r\nconst AnimeFilter = React.lazy(() => import(\"./pages/AnimeFilter\"));\r\nconst Error404 = React.lazy(() => import(\"./pages/Error404\"));\r\n\r\nfunction App() {\r\n  const client = useApolloClient();\r\n  client.writeQuery({\r\n    query: gql`\r\n      query WriteIsLoading {\r\n        loadingbar {\r\n          isLoading\r\n        }\r\n      }\r\n    `,\r\n    data: {\r\n      // Contains the data to write\r\n      loadingbar: {\r\n        __typename: \"LoadingBar\",\r\n        isLoading: 0,\r\n      },\r\n    },\r\n  });\r\n\r\n  //// jsx\r\n  return (\r\n    <div className=\"app all-grid-container\">\r\n      <ProgressBar />\r\n      {/* <header className=\"all-nav\">\r\n        <Header />\r\n      </header> */}\r\n      <ScrollToTop />\r\n      <main className=\"all-main\">\r\n        <Suspense fallback={<Loading />}>\r\n          <Switch>\r\n            <Route path={[\"/\", \"/wikianime\"]} exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path={\"/anime/:animeID\"}>\r\n              <AnimeDetail />\r\n            </Route>\r\n            <Route path={\"/search/\"}>\r\n              <AnimeFilter />\r\n            </Route>\r\n            <Route path={\"/anime/:animeID/character/:charID/actor/:actorID\"}>\r\n              <AnimeDetail />\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <Error404 />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </main>\r\n      <footer className=\"all-footer\">\r\n        <Footer />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/tailwind.output.css\";\r\nimport App from \"./App\";\r\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\nimport { ApolloProvider } from \"@apollo/client/react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://graphql.anilist.co\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n//\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}